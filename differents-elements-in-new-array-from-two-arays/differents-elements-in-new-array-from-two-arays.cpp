//Завдання 2. Дани два масиви: А[M] і B[N] (M і N вво_дяться з клавіатури). Необхідно створити третій масив  мінімально можливого розміру, у якому потрібно зібрати
//елементи масивів A і B, які не є загальними для них, без повторень
#include <iostream>
#include <Windows.h>// підключення заголовного файлу Windows.h, завдяки чому зможемо використовувати українську мову
#include <ctime>//використовуємо дану бібліотеку для рандомного заповнення масивів
using namespace std;
void inputArr(int* arr, int size) {//створюємо функцію для заповнення масиву
    for (int i = 0; i < size; i++)//використовуємо цикл для заповнення масиву
    {
        arr[i] = rand() % 50;//рандомно заповнюєм масив (рандомні числа до 50)
    }
}
void printArr(const int* arr, const int size) {//створюємо функцію для виведення елементів масиву
    for (int i = 0; i < size; i++)//використовуємо цикл для виведення елементів масиву
    {
        cout << "arr[" << i << "]=" << " " << arr[i] << "\t";//виводимо елементи масиву
    }
}
void thirdArr(int* arr, const int size, int* arr1, const int size1, int*& newArr, int& newsize) {//створюємо функцію для виведення елементів масиву
    int k = 0;//створюємо змінну для підрахунку кількості елементів масиву
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size1; j++) {
            if (arr[i] == arr1[j]) {//якщо елементи масиву однакові
                break;// то зупиняємо цикл
            }
            else if (j == size1 - 1) {//ставимо умову для кількості перевірок
                newArr[k] = arr[i];//присвоюємо  елементи масиву arr[i] - newArr[k]
                k++;//підраховуємо кількості елементів
            }
        }
    }
    for (int i = 0; i < size1; i++)
    {
        for (int j = 0; j < size; j++) {
            if (arr1[i] == arr[j]) {//якщо елементи масиву однакові
                break;// то зупиняємо цикл
            }
            else if (j == size - 1) {//ставимо умову для кількості перевірок
                newArr[k] = arr1[i];//присвоюємо  елементи масиву arr1[i] - newArr[k]
                k++;//підраховуємо кількості елементів
            }
        }
    }
    newsize = k;//присвоюємо значення кількості елементів розміру нового масиву
}
int main()
{
    srand(time(NULL));//завдяки даній функції, рандомні числа будуть постійно змінюватись 
    SetConsoleCP(1251); // встановлення кодування Windows-1251 в  потік введення
    SetConsoleOutputCP(1251); // встановлення кодування Windows-1251 в  потік виведення
    int size = 1;//оголошуємо розмірність першого масиву size
    int size1 = 1;//оголошуємо розмірність другого масиву size1
    cout << "Введіть розмір   size  елементів першого масиву" << endl;
    cin >> size;
    cout << "Введіть розмір   size1  елементів другого масиву" << endl;
    cin >> size1;
    int* arr = new int[size];//використовуємо вказівник  arr 
    int* arr1 = new int[size1];//використовуємо вказівник arr1 
    int newsize = size + size1;
    int* newArr = new int[newsize];//використовуємо вказівник  newArr 
    inputArr(arr, size);//звертаємось до функції inputArr - для першого масиву
    inputArr(arr1, size1);//звертаємось до функції inputArr - для другого масиву
    cout << "Елементи першого масиву" << endl;
    printArr(arr, size);//звертаємось до функції printArr - для першого масиву
    cout << endl;
    cout << "Елементи другого масиву" << endl;
    printArr(arr1, size1);//звертаємось до функції printArr - для другого масиву
    cout << endl;
    cout << "Елементи третього масиву" << endl;
    thirdArr(arr, size, arr1, size1, newArr, newsize);//звертаємось до функції printArr - для третього масиву
    printArr(newArr, newsize);//звертаємось до функції printArr - для третього масиву
    delete[]arr;//видаляємо вміст першого масиву
    delete[]arr1;//видаляємо вміст другого масиву
    delete[]newArr;//видаляємо вміст третього масиву
}

